# -*- coding: utf-8 -*-
"""ĐỒ ÁN TÓM TẮT VĂN BẢN BẢNG TRÍ TUỆ NHÂN TẠO DÙNG MÔ HÌNH T5 VÀ DỮ LIỆU CNN/DAILYMAIL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/199qe5yS1RpPKqKQcer2HgQwMk2nzOdrv
"""

# Cài đặt thư viện cần thiết
!pip install transformers datasets

!pip install numpy

pip install --upgrade datasets

from transformers import T5ForConditionalGeneration, T5Tokenizer

# Tải mô hình và tokenizer
model_name = "t5-small"  # Bạn có thể đổi thành "t5-base" hoặc "t5-large"
tokenizer = T5Tokenizer.from_pretrained(model_name)
model = T5ForConditionalGeneration.from_pretrained(model_name)

from datasets import load_dataset

# Tải dữ liệu CNN/DAILY MAIL
dataset = load_dataset("cnn_dailymail", "3.0.0")

from transformers import BartTokenizer

# Tải tokenizer
tokenizer = BartTokenizer.from_pretrained("facebook/bart-large-cnn")

# Kích hoạt GPU
import torch
device = "cuda" if torch.cuda.is_available() else "cpu"
model = model.to(device)

# Đưa input_ids vào GPU nếu có
input_ids = input_ids.to(device)

# Lấy một mẫu từ dữ liệu để thử nghiệm
sample_text = dataset['train'][0]['article']  # Lấy bài báo đầu tiên từ tập train
print("Văn bản gốc:", sample_text)

# Thêm prefix "summarize: " vào văn bản
input_text = "summarize: " + sample_text

# Tokenize dữ liệu
input_ids = tokenizer.encode(input_text, return_tensors="pt", max_length=512, truncation=True)

from transformers import BartForConditionalGeneration, BartTokenizer

# Tải mô hình và tokenizer
model = BartForConditionalGeneration.from_pretrained("facebook/bart-large-cnn")
tokenizer = BartTokenizer.from_pretrained("facebook/bart-large-cnn")

# Generate summary
summary_ids = model.generate(input_ids, max_length=150, min_length=40, length_penalty=2.0, num_beams=4, early_stopping=True)

# Giải mã kết quả tóm tắt
summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
print("Tóm tắt:", summary)

for i in range(3):  # Lặp qua 3 mẫu
    sample_text = dataset['train'][i]['article']
    input_text = "summarize: " + sample_text
    input_ids = tokenizer.encode(input_text, return_tensors="pt", max_length=512, truncation=True).to(device)
    summary_ids = model.generate(input_ids, max_length=150, min_length=40, length_penalty=2.0, num_beams=4, early_stopping=True)
    summary = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    print(f"Văn bản gốc {i+1}:", sample_text)
    print(f"Tóm tắt {i+1}:", summary)
    print("-" * 80)

pip install streamlit transformers

import ipywidgets as widgets
from google.colab import files
from IPython.display import display, clear_output

# Danh sách ngôn ngữ giao diện (nhiều nước)
ui_languages = [
    ('🇻🇳 Tiếng Việt', 'vi'),
    ('🇺🇸 English', 'en'),
    ('🇨🇳 中文 (Chinese)', 'zh'),
    ('🇪🇸 Español', 'es'),
    ('🇫🇷 Français', 'fr'),
    ('🇩🇪 Deutsch', 'de'),
    ('🇯🇵 日本語 (Japanese)', 'ja'),
    ('🇰🇷 한국어 (Korean)', 'ko'),
    ('🇹🇭 ภาษาไทย (Thai)', 'th'),
    ('🇷🇺 Русский (Russian)', 'ru'),
    ('🇧🇷 Português', 'pt')
]

# Danh sách ngôn ngữ lập trình (có thể thêm/bớt)
prog_languages = [
    'Python', 'JavaScript', 'C++', 'Java', 'C#', 'Go', 'Ruby', 'PHP', 'Other'
]

# Widget chọn ngôn ngữ giao diện
ui_lang_dropdown = widgets.Dropdown(
    options=ui_languages,
    value='vi',
    description='🌏 Giao diện:',
    style={'description_width':'110px'},
    layout=widgets.Layout(width='60%')
)

# Widget chọn loại ngôn ngữ lập trình
prog_lang_dropdown = widgets.Dropdown(
    options=prog_languages,
    value='Python',
    description='💻 Lập trình:',
    style={'description_width':'110px'},
    layout=widgets.Layout(width='60%')
)

# Widget nhập nội dung
text_box = widgets.Textarea(
    value='',
    placeholder='✍️ Nhập nội dung tại đây...',
    description='📝 Nội dung:',
    layout=widgets.Layout(width='100%', height='120px'),
    style={'description_width':'110px'}
)

# Nút upload file
upload_button = widgets.Button(
    description="📂 Chọn file để upload",
    button_style='info', # 'primary', 'success', 'info', 'warning', 'danger'
    layout=widgets.Layout(width='220px')
)

# Nút gửi
submit_button = widgets.Button(
    description="🚀 Gửi",
    button_style='success',
    layout=widgets.Layout(width='120px')
)

# Custom HTML cho tiêu đề (màu mè)
colorful_title = widgets.HTML("""
    <h2 style='
        background: linear-gradient(90deg, #ff9800, #f44336, #2196f3, #4caf50, #9c27b0);
        color: white;
        padding: 18px;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 10px;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        letter-spacing: 2px;
    '>
      🎉 Tải file, nhập nội dung & chọn ngôn ngữ 🌍
    </h2>
""")

output = widgets.Output()
uploaded_files = {}

def on_upload_clicked(b):
    with output:
        clear_output()
        display(widgets.HTML('<span style="color:#2196f3;font-weight:bold">Đang tải file lên, vui lòng chờ...</span>'))
        uploaded = files.upload()
        if uploaded:
            display(widgets.HTML('<span style="color:green;font-weight:bold">Đã tải lên thành công các file:</span>'))
            for fn in uploaded.keys():
                display(widgets.HTML(f'<li style="color:#4caf50">{fn}</li>'))
            global uploaded_files
            uploaded_files = uploaded
        else:
            display(widgets.HTML('<span style="color:orange">Không có file nào được chọn.</span>'))

def on_submit_clicked(b):
    with output:
        clear_output()
        display(widgets.HTML(f"""
            <div style='border:2px dashed #4caf50; border-radius:12px; padding:16px; margin-bottom:10px; background:#f7fff7'>
                <b style="color:#f44336">Nội dung bạn vừa nhập:</b>
                <pre style="background:#23272e; color:#fff; border-radius:8px; padding:10px">{text_box.value}</pre>
                <span style="color:#2196f3"><b>Ngôn ngữ giao diện đã chọn:</b> {dict(ui_languages)[ui_lang_dropdown.value]}</span><br>
                <span style="color:#9c27b0"><b>Ngôn ngữ lập trình đã chọn:</b> {prog_lang_dropdown.value}</span>
            </div>
        """))
        if uploaded_files:
            display(widgets.HTML('<b style="color:#009688">Các file đã upload:</b>'))
            for fn in uploaded_files.keys():
                display(widgets.HTML(f'<li style="color:#607d8b">{fn}</li>'))
        else:
            display(widgets.HTML('<span style="color:orange">Chưa upload file nào.</span>'))

upload_button.on_click(on_upload_clicked)
submit_button.on_click(on_submit_clicked)

# Hiển thị giao diện màu mè
display(widgets.VBox([
    colorful_title,
    ui_lang_dropdown,
    prog_lang_dropdown,
    text_box,
    widgets.HBox([upload_button, submit_button]),
    output
], layout=widgets.Layout(border='3px solid #9c27b0', border_radius='18px', padding='18px', box_shadow='0 4px 16px #b39ddb44')))

!pip install pyngrok

!pip show streamlit
!pip show transformers
!pip show pyngrok

!rm -rf /root/.ngrok2/ngrok.yml

!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
!unzip ngrok-stable-linux-amd64.zip

!ngrok config add-authtoken 2xUIVFYU2YvFW3y6YFfgXHSFYx1_3JUNxFUJqN1cZazyR8XTn

!./ngrok http 8501

!streamlit run app.py &>/dev/null&

!ls

import streamlit as st
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import time

# --- Cấu hình giao diện ---
st.set_page_config(page_title="Tóm Tắt Văn Bản", page_icon="📝", layout="centered")

# --- CSS LED RGB động + hiệu ứng Liquid Glass ---
st.markdown("""
    <style>
    html, body {
        font-family: 'Segoe UI', 'Roboto', sans-serif;
        margin: 0;
        padding: 0;
        height: 100%;
        background: linear-gradient(270deg, #ff4b4b, #ffcc00, #00ffcc, #0099ff, #cc00ff);
        background-size: 1000% 1000%;
        animation: rgbBackground 20s ease infinite;
    }

    @keyframes rgbBackground {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }

    .block-container {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(12px);
        -webkit-backdrop-filter: blur(12px);
        border-radius: 25px;
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 8px 32px rgba(31, 38, 135, 0.2);
        padding: 3rem;
        margin-top: 4rem;
    }

    .stTextArea textarea {
        font-size: 16px !important;
        padding: 15px;
        border-radius: 12px;
        background: rgba(255, 255, 255, 0.15);
        color: #000;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .stButton button {
        background-color: #ff4b4b;
        color: white;
        border-radius: 12px;
        padding: 12px 30px;
        font-size: 16px;
        font-weight: bold;
        border: none;
        box-shadow: 0 4px 14px rgba(255, 75, 75, 0.4);
    }

    .stButton button:hover {
        background-color: #e03a3a;
        box-shadow: 0 6px 20px rgba(255, 75, 75, 0.6);
    }

    .title-style {
        color: #ffffff;
        text-align: center;
        font-size: 36px;
        font-weight: bold;
        margin-bottom: 1rem;
        text-shadow: 0px 0px 10px #000000;
    }

    .summary-style {
        background: rgba(255, 255, 255, 0.25);
        backdrop-filter: blur(10px);
        padding: 20px;
        border-radius: 12px;
        font-size: 18px;
        color: #000;
        margin-top: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.3);
    }
    </style>
""", unsafe_allow_html=True)

# --- Load mô hình T5 ---
@st.cache_resource
def load_model_tokenizer():
    tokenizer = AutoTokenizer.from_pretrained("VietAI/vit5-base-vietnews-summarization")
    model = AutoModelForSeq2SeqLM.from_pretrained("VietAI/vit5-base-vietnews-summarization")
    return tokenizer, model

tokenizer, model = load_model_tokenizer()

# --- Hàm tóm tắt ---
def summarize_text_vi(text):
    input_ids = tokenizer(text, return_tensors="pt", max_length=512, truncation=True).input_ids
    summary_ids = model.generate(
        input_ids,
        max_length=100,
        min_length=20,
        length_penalty=2.0,
        num_beams=4,
        early_stopping=True
    )
    output = tokenizer.decode(summary_ids[0], skip_special_tokens=True)
    return output

# --- Giao diện chính ---
st.markdown("<h1 class='title-style'>📝 Ứng Dụng Tóm Tắt Văn Bản</h1>", unsafe_allow_html=True)
st.markdown("### 📄 Nhập nội dung bên dưới để tiến hành tóm tắt:")

input_text = st.text_area("✏️ Nội dung văn bản:", height=200, placeholder="Nhập văn bản tại đây...")

if st.button("🚀 Tóm tắt ngay!"):
    if input_text.strip():
        with st.spinner("⏳ Đang tóm tắt, vui lòng đợi..."):
            progress_bar = st.progress(0)
            for percent_complete in range(0, 101, 10):
                time.sleep(0.03)
                progress_bar.progress(percent_complete)

            try:
                summary = summarize_text_vi(input_text)
                st.success("✅ Kết quả tóm tắt:")
                st.markdown(f"<div class='summary-style'>{summary}</div>", unsafe_allow_html=True)
            except Exception as e:
                st.error(f"❌ Lỗi khi tóm tắt: {str(e)}")
    else:
        st.warning("⚠️ Vui lòng nhập văn bản trước khi nhấn nút.")

!pip install Sentencepiece

pip install streamlit transformers torch

!pip install underthesea

!streamlit run app.py

!streamlit run app.py --server.port 8501 --server.headless true &>/dev/null&

!lsof -i:8501

!ps aux | grep streamlit

from pyngrok import ngrok

# Mở cổng ngrok để tạo URL công khai
public_url = ngrok.connect(8501)  # 8501 là cổng mặc định của Streamlit
print("Mở ứng dụng tại:", public_url)